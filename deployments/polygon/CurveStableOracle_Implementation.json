{
  "address": "0x4a5af049c3FD1D9dedE54B938a01cE318806357D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RegisterLpToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAddressProvider",
      "outputs": [
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crvLp",
          "type": "address"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "coins",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "virtualPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crvLp",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "tokensUsdOracleData",
          "type": "bytes[]"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crvLp",
          "type": "address"
        }
      ],
      "name": "getTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "registryIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct CurveBaseOracle.TokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "_addressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracleV2",
          "name": "_primexPriceOracle",
          "type": "address"
        },
        {
          "internalType": "contract IAccessControl",
          "name": "_primexRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primexPriceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracleV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primexRegistry",
      "outputs": [
        {
          "internalType": "contract IAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crvLp",
          "type": "address"
        }
      ],
      "name": "registerCurveLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xceb7fea45a86e157f093a761c5da021e4d9772ae0091808200a00db254082ff5",
  "receipt": {
    "to": null,
    "from": "0xD709D3C31A7C668b85274CF6Dc3DE8BEfEb822e8",
    "contractAddress": "0x4a5af049c3FD1D9dedE54B938a01cE318806357D",
    "transactionIndex": 4,
    "gasUsed": "1267435",
    "logsBloom": "0x
    "blockHash": "0x198e7471e4f3d91fe4197a40deaab4987bf4f2668f7acc1b19a425cd2fdf01a9",
    "transactionHash": "0xceb7fea45a86e157f093a761c5da021e4d9772ae0091808200a00db254082ff5",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 63471882,
        "transactionHash": "0xceb7fea45a86e157f093a761c5da021e4d9772ae0091808200a00db254082ff5",
        "address": "0x4a5af049c3FD1D9dedE54B938a01cE318806357D",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 30,
        "blockHash": "0x198e7471e4f3d91fe4197a40deaab4987bf4f2668f7acc1b19a425cd2fdf01a9"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 63471882,
        "transactionHash": "0xceb7fea45a86e157f093a761c5da021e4d9772ae0091808200a00db254082ff5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d709d3c31a7c668b85274cf6dc3de8befeb822e8",
          "0x0000000000000000000000001efecb61a2f80aa34d3b9218b564a64d05946290"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001baa63c386321f9000000000000000000000000000000000000000000000000846186aa97fe2a00000000000000000000000000000000000000000000000ec05bd0a291f1cb2ae400000000000000000000000000000000000000000000000082a6e06e5f9b0807000000000000000000000000000000000000000000000ec05d8b48ce2a2e4cdd",
        "logIndex": 31,
        "blockHash": "0x198e7471e4f3d91fe4197a40deaab4987bf4f2668f7acc1b19a425cd2fdf01a9"
      }
    ],
    "blockNumber": 63471882,
    "cumulativeGasUsed": "1868837",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2e4d15d04023f0d395019bf23626c23a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RegisterLpToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAddressProvider\",\"outputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crvLp\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"coins\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crvLp\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"tokensUsdOracleData\",\"type\":\"bytes[]\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crvLp\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"registryIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveBaseOracle.TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"_addressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracleV2\",\"name\":\"_primexPriceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IAccessControl\",\"name\":\"_primexRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primexPriceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracleV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primexRegistry\",\"outputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crvLp\",\"type\":\"address\"}],\"name\":\"registerCurveLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BlueberryProtocol\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RegisterLpToken(address)\":{\"params\":{\"token\":\"Address of the LP token being registered\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getPoolInfo(address)\":{\"params\":{\"crvLp\":\"The address of the Curve liquidity pool token (LP token).\"},\"returns\":{\"coins\":\"A list of underlying tokens in the Curve liquidity pool.\",\"pool\":\"Address of the pool contract.\",\"virtualPrice\":\"The current virtual price of the LP token for the given Curve liquidity pool.\"}},\"getPrice(address,bytes[])\":{\"params\":{\"token\":\"Address of the LP token for which the price is requested.\",\"tokensUsdOracleData\":\"An array of oracle data to use for price calculations\"},\"returns\":{\"_0\":\"The USD price of the given token, multiplied by 10**18.\"}},\"getTokenInfo(address)\":{\"params\":{\"crvLp\":\"Curve LP Token address\"},\"returns\":{\"_0\":\"TokenInfo struct of given token\"}},\"initialize(address,address,address)\":{\"params\":{\"_addressProvider\":\"Address of the curve address provider\",\"_primexPriceOracle\":\"The base oracle instance.\",\"_primexRegistry\":\"Address of the owner of the contract.\"}},\"registerCurveLp(address)\":{\"params\":{\"crvLp\":\"Address of the Curve LP token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"_MAX_GAS\":{\"details\":\"Max gas for reentrancy check.\"}},\"title\":\"CurveStableOracle\",\"version\":1},\"userdoc\":{\"events\":{\"RegisterLpToken(address)\":{\"notice\":\"Event emitted when a new LP token is registered within its respective implementation.\"}},\"kind\":\"user\",\"methods\":{\"getAddressProvider()\":{\"notice\":\"Returns the Curve Address Provider.\"},\"getPoolInfo(address)\":{\"notice\":\"Fetches relevant information about a Curve liquidity pool.\"},\"getPrice(address,bytes[])\":{\"notice\":\"Fetches the price of the given token in USD with 18 decimals precision.\"},\"getTokenInfo(address)\":{\"notice\":\"Fetches the token info for a given LP token.\"},\"initialize(address,address,address)\":{\"notice\":\"Initializes the contract\"},\"registerCurveLp(address)\":{\"notice\":\"Registers Curve LP token with the oracle.\"}},\"notice\":\"Oracle contract that provides price feeds for Curve stable LP tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CurvePriceFeeds/CurveStableOracle.sol\":\"CurveStableOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@orally-network/solidity-sdk/IOrallyVerifierOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.18;\\n\\nimport {OrallyStructs} from \\\"./OrallyStructs.sol\\\";\\n\\n/**\\n * @title IOrallyVerifierOracle\\n * @notice Interface for the OrallyVerifierOracle contract.\\n * This interface defines the required functions for verifying and handling\\n * data feeds, specifically focusing on functionality related to price feeds\\n * and custom data verification processes.\\n */\\ninterface IOrallyVerifierOracle {\\n    // Events to notify about changes in reporter status or data updates\\n    event ReporterAdded(address indexed reporter);\\n    event ReporterRemoved(address indexed reporter);\\n    event PriceFeedSaved(string indexed pairId, uint256 price, uint256 decimals, uint256 timestamp);\\n    event CustomNumberSaved(string indexed feedId, uint256 value, uint256 decimals);\\n    event CustomStringSaved(string indexed feedId, string value);\\n\\n    // Price Feeds\\n\\n    /**\\n     * @notice Gets the price feed data for a given pair ID.\\n     * @param pairId The unique identifier for the currency pair.\\n     * @return The price feed data for the given pair ID.\\n     */\\n    function getPriceFeed(string memory pairId) external view returns (OrallyStructs.PriceFeed memory);\\n\\n    /**\\n     * @notice Verifies the integrity and authenticity of price feed data, then returns it (if fee paid with API key / allowed domain).\\n     * @param _data The packed byte array containing the price feed and its signature.\\n     * @return Tuple of pair ID, price, decimals, and timestamp if the verification is successful.\\n     */\\n    function verifyPriceFeed(bytes memory _data) external view returns (OrallyStructs.PriceFeed memory);\\n\\n    /**\\n     * @notice Verifies, caches, and returns the details of a price feed (if fee paid with API key / allowed domain).\\n     * Caching is performed to store the most recent and valid data.\\n     * @param _data The packed data containing the price feed and its signature.\\n     * @return Tuple of pair ID, price, decimals, and timestamp.\\n     */\\n    function updatePriceFeed(bytes memory _data) external returns (OrallyStructs.PriceFeed memory);\\n\\n    // --------------------------------------------------------------\\n    // Custom Numbers\\n\\n    /**\\n     * @notice Gets the custom number data for a given feed ID.\\n     * @param _feedId The unique identifier for the custom number feed.\\n     * @return The custom number data for the given feed ID.\\n     */\\n    function getCustomNumber(string memory _feedId) external view returns (OrallyStructs.CustomNumber memory);\\n\\n    /**\\n     * @notice Verifies and returns custom numerical data from provided packed data.\\n     * @param data The packed data containing custom numerical information and its signature.\\n     * @return Tuple containing the feed ID, numerical value, and decimals.\\n     */\\n    function verifyCustomNumber(bytes memory data) external view returns (OrallyStructs.CustomNumber memory);\\n\\n    /**\\n     * @notice Verifies, caches, and returns the details of a custom number feed (if fee paid with API key / allowed domain).\\n     * Caching is performed to store the most recent and valid data.\\n     * @param _data The packed data containing the custom number feed and its signature.\\n     * @return Tuple of feed ID, numerical value, and decimals.\\n     */\\n    function updateCustomNumber(bytes memory _data) external returns (OrallyStructs.CustomNumber memory);\\n\\n    // --------------------------------------------------------------\\n    // Custom Strings\\n\\n    /**\\n     * @notice Gets the custom string data for a given feed ID.\\n     * @param _feedId The unique identifier for the custom string feed.\\n     * @return The custom string data for the given feed ID.\\n     */\\n    function getCustomString(string memory _feedId) external view returns (OrallyStructs.CustomString memory);\\n\\n    /**\\n     * @notice Verifies and returns custom string data from provided packed data.\\n     * @param data The packed data containing custom string information and its signature.\\n     * @return Tuple containing the feed ID and the string value.\\n     */\\n    function verifyCustomString(bytes memory data) external view returns (OrallyStructs.CustomString memory);\\n\\n    /**\\n     * @notice Verifies, caches, and returns the details of a custom string feed (if fee paid with API key / allowed domain).\\n     * Caching is performed to store the most recent and valid data.\\n     * @param _data The packed data containing the custom string feed and its signature.\\n     * @return Tuple of feed ID and the string value.\\n     */\\n    function updateCustomString(bytes memory _data) external returns (OrallyStructs.CustomString memory);\\n\\n    // --------------------------------------------------------------\\n\\n    /**\\n     * @notice Verifies and returns the details of a chain data feed from provided feed.\\n     * @param _chainData The packed data containing the chain data feed and its signature.\\n     * @return Tuple of chainData and metaData if the verification is successful.\\n     */\\n    function verifyReadContractData(bytes memory _chainData) external view returns (bytes memory, bytes memory);\\n\\n    /**\\n    * @notice Verifies and returns the details of a chain data feed from provided feed.\\n     * @param _chainData The packed data containing the chain data feed and its signature.\\n     * @return Tuple of chainData and metaData if the verification is successful.\\n     */\\n    function verifyReadLogsData(bytes memory _chainData) external view returns (bytes memory, bytes memory);\\n\\n    // Reporters\\n\\n    /**\\n     * @notice Checks if an address is an authorized reporter.\\n     * @param _reporter The address to check.\\n     * @return bool Returns true if the address is authorized to submit data.\\n     */\\n    function isReporter(address _reporter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe7e28048dd03c4e0fbe0dab969c0967bf3ec529aeac5fd5539192fb9470fd8b7\",\"license\":\"AGPL-3.0\"},\"@orally-network/solidity-sdk/OrallyStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.18;\\n\\ncontract OrallyStructs {\\n    // Structure to store information about each price feed\\n    struct PriceFeed {\\n        string pairId;     // The identifier for the currency pair\\n        uint256 price;     // The latest price of the currency pair\\n        uint256 decimals;  // The decimal places for the price to ensure precision\\n        uint256 timestamp; // The timestamp when the price was last updated\\n    }\\n\\n    struct Meta {\\n        string feedId;      // The identifier for the data feed\\n        uint256 timestamp;  // The timestamp HTTP Gateway response happened\\n        uint256 fee;        // The update fee in ether (could be zero)\\n//        string fee_symbol;  // The symbol of the fee token\\n    }\\n\\n    // Structure to store custom number data\\n    struct CustomNumber {\\n        string feedId;      // The identifier for the data feed\\n        uint256 value;      // The custom number value\\n        uint256 decimals;   // The timestamp when the number was last updated\\n    }\\n\\n    // Structure to store custom string data\\n    struct CustomString {\\n        string feedId;  // The identifier for the data feed\\n        string value;   // The custom string data\\n    }\\n\\n    // Structure to store chain data feed and metadata\\n    struct ReadContractMetadata {\\n        uint256 chain_id;           // The chain ID of the contract\\n        address contract_address;   // The address of the contract\\n        string method;              // The method of the contract call\\n        string params;              // The parameters of the contract call\\n        uint256 block_number;       // The block number the contract call happened (0 if last one)\\n        uint256 timestamp;          // The timestamp HTTP Gateway response happened\\n        uint256 fee;                // The update fee in ether (could be zero)\\n        string fee_symbol;          // The symbol of the fee token\\n    }\\n\\n    struct ReadLogsData {\\n        address addr;\\n        string[] topics;\\n        bytes data;\\n        string block_hash;\\n        uint256 block_number;\\n        string transaction_hash;\\n        uint256 transaction_index;\\n        string log_index;\\n        string transaction_log_index;\\n        string log_type;\\n        bool removed;\\n    }\\n\\n    struct ReadLogsMetadata {\\n        uint256 chain_id;\\n        uint256 block_from;\\n        uint256 block_to;\\n        string[] topics0;\\n        string[] topics1;\\n        string[] topics2;\\n        string[] topics3;\\n        address[] addresses;\\n        uint256 timestamp;\\n\\n        uint256 fee;        // The update fee in ether (could be zero)\\n        string fee_symbol;  // The symbol of the fee token\\n    }\\n}\\n\",\"keccak256\":\"0x523635406666c42d69898ef784490cd95fb09ef68461455cc58f3311320a4736\",\"license\":\"AGPL-3.0\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\nimport {IArbGasInfo} from \\\"./interfaces/IArbGasInfo.sol\\\";\\nimport {IOVM_GasPriceOracle} from \\\"./interfaces/IOVM_GasPriceOracle.sol\\\";\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_MANAGER_ROLE = keccak256(\\\"FLASH_LOAN_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_FREE_BORROWER_ROLE = keccak256(\\\"FLASH_LOAN_FREE_BORROWER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\naddress constant NATIVE_CURRENCY_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\\n// constants for Arbitrum payment model\\nIArbGasInfo constant ARB_NITRO_ORACLE = IArbGasInfo(0x000000000000000000000000000000000000006C);\\nuint256 constant TRANSACTION_METADATA_BYTES = 140;\\n\\nIOVM_GasPriceOracle constant OVM_GASPRICEORACLE = IOVM_GasPriceOracle(0x420000000000000000000000000000000000000F);\\n\\nuint256 constant GAS_FOR_BYTE = 16;\\n\",\"keccak256\":\"0x877c0b0df911dc5658c824d17ca011aa9480696630e326a4f1a046d2db4f2ea1\",\"license\":\"BUSL-1.1\"},\"contracts/CurvePriceFeeds/CurveBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport {ICurveBaseOracle} from \\\"./ICurveBaseOracle.sol\\\";\\nimport {ICurveRegistry} from \\\"../interfaces/curve/ICurveRegistry.sol\\\";\\nimport {ICurveCryptoSwapRegistry} from \\\"../interfaces/curve/ICurveCryptoSwapRegistry.sol\\\";\\nimport {ICurveAddressProvider} from \\\"../interfaces/curve/ICurveAddressProvider.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {SMALL_TIMELOCK_ADMIN} from \\\"../Constants.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\n/**\\n * @title Curve Base Oracle\\n * @notice Abstract base oracle for Curve LP token price feeds.\\n */\\nabstract contract CurveBaseOracle is ICurveBaseOracle, ERC165Upgradeable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      structs \\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Struct to store token info related to Curve Tokens\\n     * @param pool Address of the Curve pool.\\n     * @param tokens tokens in the Curve liquidity pool.\\n     * @param registryIndex Index of the registry to use for a given pool.\\n     * @dev This registry index is associated with a given pool type.\\n     *      0 - Main Curve Registry\\n     *      5 - CryptoSwap Curve Registry\\n     *      7 - Meta Curve Registry\\n     */\\n    struct TokenInfo {\\n        address pool;\\n        address[] tokens;\\n        uint256 registryIndex;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       STORAGE \\n    //////////////////////////////////////////////////////////////////////////*/\\n    /// @dev Primex's registry contract\\n    IAccessControl public override primexRegistry;\\n\\n    /// @dev Base oracle source\\n    IPriceOracleV2 public primexPriceOracle;\\n\\n    /// @dev Address provider for Curve-related contracts.\\n    ICurveAddressProvider private addressProvider;\\n    /// @dev Mapping of Curve Lp token to token info.\\n    mapping(address => TokenInfo) private tokenInfo;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     MODIFIERS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Modifier that checks if the caller has a specific role.\\n     * @param _role The role identifier to check.\\n     */\\n    modifier onlyRole(bytes32 _role) {\\n        _require(IAccessControl(primexRegistry).hasRole(_role, msg.sender), Errors.FORBIDDEN.selector);\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n    /* solhint-disable func-name-mixedcase */\\n    /**\\n     * @notice Initializes the contract\\n     * @param _addressProvider Address of the curve address provider\\n     * @param _primexPriceOracle The base oracle instance.\\n     * @param _primexRegistry Address of the owner of the contract.\\n     */\\n    function __CurveBaseOracle_init(\\n        ICurveAddressProvider _addressProvider,\\n        IPriceOracleV2 _primexPriceOracle,\\n        IAccessControl _primexRegistry\\n    ) internal {\\n        _require(\\n            ERC165Upgradeable(address(_primexPriceOracle)).supportsInterface(type(IPriceOracleV2).interfaceId) &&\\n                ERC165Upgradeable(address(_primexRegistry)).supportsInterface(type(IAccessControl).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        addressProvider = _addressProvider;\\n        primexPriceOracle = _primexPriceOracle;\\n        primexRegistry = _primexRegistry;\\n    }\\n\\n    /* solhint-enable func-name-mixedcase */\\n\\n    /**\\n     * @notice Registers Curve LP token with the oracle.\\n     * @param crvLp Address of the Curve LP token.\\n     */\\n    function registerCurveLp(address crvLp) external onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        if (crvLp == address(0)) _revert(Errors.ZERO_ADDRESS.selector);\\n        (address pool, address[] memory tokens, uint256 registryIndex) = _setTokens(crvLp);\\n        tokenInfo[crvLp] = TokenInfo(pool, tokens, registryIndex);\\n    }\\n\\n    /**\\n     * @notice Fetches the token info for a given LP token.\\n     * @param crvLp Curve LP Token address\\n     * @return TokenInfo struct of given token\\n     */\\n    function getTokenInfo(address crvLp) public view returns (TokenInfo memory) {\\n        return tokenInfo[crvLp];\\n    }\\n\\n    /// @inheritdoc ICurveBaseOracle\\n    function getPoolInfo(\\n        address crvLp\\n    ) external view returns (address pool, address[] memory coins, uint256 virtualPrice) {\\n        return _getPoolInfo(crvLp);\\n    }\\n\\n    /// @inheritdoc ICurveBaseOracle\\n    function getAddressProvider() external view override returns (ICurveAddressProvider) {\\n        return addressProvider;\\n    }\\n\\n    /// @dev Logic for getPoolInfo.\\n    function _getPoolInfo(\\n        address crvLp\\n    ) internal view returns (address pool, address[] memory ulTokens, uint256 virtualPrice) {\\n        TokenInfo memory tokenInfo = getTokenInfo(crvLp);\\n        if (tokenInfo.pool == address(0)) _revert(Errors.ORACLE_NOT_SUPPORT_LP.selector);\\n\\n        // If the registry index is 0, use the main Curve registry.\\n        if (tokenInfo.registryIndex == 0) {\\n            address registry = addressProvider.get_registry();\\n\\n            pool = tokenInfo.pool;\\n            ulTokens = tokenInfo.tokens;\\n            virtualPrice = ICurveRegistry(registry).get_virtual_price_from_lp_token(crvLp);\\n\\n            return (pool, ulTokens, virtualPrice);\\n        }\\n\\n        // If the registry index is 5, use the CryptoSwap Curve registry.\\n        // If the registry index is 7, use the Meta Curve registry.\\n        if (tokenInfo.registryIndex == 5 || tokenInfo.registryIndex == 7) {\\n            address registry = addressProvider.get_address(tokenInfo.registryIndex);\\n\\n            pool = tokenInfo.pool;\\n            ulTokens = tokenInfo.tokens;\\n            virtualPrice = ICurveCryptoSwapRegistry(registry).get_virtual_price_from_lp_token(crvLp);\\n\\n            return (pool, ulTokens, virtualPrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to fetch the tokens in a given Curve liquidity pool.\\n     * @param crvLp The address of the Curve liquidity pool token (LP token).\\n     * @return pool The address of the Curve pool.\\n     * @return tokens An array of tokens in the Curve liquidity pool.\\n     * @return registryIndex The index of the registry to use for a given pool.\\n     */\\n    function _setTokens(\\n        address crvLp\\n    ) internal view returns (address pool, address[] memory tokens, uint256 registryIndex) {\\n        /// 1. Attempt retrieval from main Curve registry.\\n        address registry = addressProvider.get_registry();\\n        pool = ICurveRegistry(registry).get_pool_from_lp_token(crvLp);\\n\\n        if (pool != address(0)) {\\n            (uint256 n, ) = ICurveRegistry(registry).get_n_coins(pool);\\n            address[8] memory coins = ICurveRegistry(registry).get_coins(pool);\\n\\n            tokens = new address[](n);\\n            for (uint256 i = 0; i < n; ++i) {\\n                tokens[i] = coins[i];\\n            }\\n\\n            // Main Curve Registry index: 0\\n            return (pool, tokens, 0);\\n        }\\n\\n        /// 2. Attempt retrieval from CryptoSwap Curve registry.\\n        registry = addressProvider.get_address(5);\\n        pool = ICurveCryptoSwapRegistry(registry).get_pool_from_lp_token(crvLp);\\n\\n        if (pool != address(0)) {\\n            uint256 n = ICurveCryptoSwapRegistry(registry).get_n_coins(pool);\\n            address[8] memory coins = ICurveCryptoSwapRegistry(registry).get_coins(pool);\\n\\n            tokens = new address[](n);\\n            for (uint256 i = 0; i < n; ++i) {\\n                tokens[i] = coins[i];\\n            }\\n\\n            // CryptoSwap Curve Registry index: 5\\n            return (pool, tokens, 5);\\n        }\\n\\n        /// 3. Attempt retrieval from Meta Curve registry.\\n        registry = addressProvider.get_address(7);\\n        pool = ICurveCryptoSwapRegistry(registry).get_pool_from_lp_token(crvLp);\\n\\n        if (pool != address(0)) {\\n            uint256 n = ICurveCryptoSwapRegistry(registry).get_n_coins(pool);\\n            address[8] memory coins = ICurveCryptoSwapRegistry(registry).get_coins(pool);\\n\\n            tokens = new address[](n);\\n            for (uint256 i = 0; i < n; ++i) {\\n                tokens[i] = coins[i];\\n            }\\n\\n            // Meta Curve Curve Registry index: 7\\n            return (pool, tokens, 7);\\n        }\\n\\n        _revert(Errors.ORACLE_NOT_SUPPORT_LP.selector);\\n    }\\n\\n    /**\\n     * @notice Internal function to check for reentrancy within Curve pools.\\n     * @param pool The address of the Curve pool to check.\\n     * @param numTokens The number of tokens in the pool.\\n     */\\n    function _checkReentrant(address pool, uint256 numTokens) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x312d4ddc088cb2a76b6a3ed920adacc0d3473f5e6e24d21bebdcd8b1b5982db0\",\"license\":\"MIT\"},\"contracts/CurvePriceFeeds/CurveStableOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport {CurveBaseOracle} from \\\"./CurveBaseOracle.sol\\\";\\n\\nimport {ICurveAddressProvider} from \\\"../interfaces/curve/ICurveAddressProvider.sol\\\";\\nimport {ICurveReentrencyWrapper} from \\\"../interfaces/curve/ICurveReentrencyWrapper.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ICurveBaseOracle} from \\\"./ICurveBaseOracle.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\nimport {USD} from \\\"../Constants.sol\\\";\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\n/**\\n * @title CurveStableOracle\\n * @author BlueberryProtocol\\n * @notice Oracle contract that provides price feeds for Curve stable LP tokens.\\n */\\ncontract CurveStableOracle is CurveBaseOracle {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      CONSTANTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Max gas for reentrancy check.\\n    uint256 private constant _MAX_GAS = 10_000;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////////////////*/\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n    /**\\n     * @notice Initializes the contract\\n     * @param _addressProvider Address of the curve address provider\\n     * @param _primexPriceOracle The base oracle instance.\\n     * @param _primexRegistry Address of the owner of the contract.\\n     */\\n    function initialize(\\n        ICurveAddressProvider _addressProvider,\\n        IPriceOracleV2 _primexPriceOracle,\\n        IAccessControl _primexRegistry\\n    ) external override initializer {\\n        __CurveBaseOracle_init(_addressProvider, _primexPriceOracle, _primexRegistry);\\n    }\\n\\n    /// @inheritdoc ICurveBaseOracle\\n    function getPrice(address crvLp, bytes[] calldata tokensUsdOracleData) external override returns (uint256) {\\n        (address pool, address[] memory tokens, uint256 virtualPrice) = _getPoolInfo(crvLp);\\n        _require(tokensUsdOracleData.length == tokens.length, Errors.ORACLE_DATA_AND_TOKENS_LENGTH_MISMATCH.selector);\\n        if (_checkReentrant(pool, tokens.length)) _revert(Errors.REENTRANCY_RISK.selector);\\n\\n        uint256 minPrice = type(uint256).max;\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            uint256 tokenPrice = primexPriceOracle.getExchangeRate(tokens[i], USD, tokensUsdOracleData[i]);\\n            if (tokenPrice < minPrice) minPrice = tokenPrice;\\n        }\\n\\n        // Calculate LP token price using the minimum underlying token price\\n        return (minPrice * virtualPrice) / WadRayMath.WAD;\\n    }\\n\\n    /// @inheritdoc CurveBaseOracle\\n    function _checkReentrant(address _pool, uint256 _numTokens) internal view override returns (bool) {\\n        ICurveReentrencyWrapper pool = ICurveReentrencyWrapper(_pool);\\n\\n        uint256 gasStart = gasleft();\\n\\n        //  solhint-disable no-empty-blocks\\n        if (_numTokens == 2) {\\n            uint256[2] memory amounts;\\n            try pool.remove_liquidity{gas: _MAX_GAS}(0, amounts) {} catch (bytes memory) {}\\n        } else if (_numTokens == 3) {\\n            uint256[3] memory amounts;\\n            try pool.remove_liquidity{gas: _MAX_GAS}(0, amounts) {} catch (bytes memory) {}\\n        } else if (_numTokens == 4) {\\n            uint256[4] memory amounts;\\n            try pool.remove_liquidity{gas: _MAX_GAS}(0, amounts) {} catch (bytes memory) {}\\n        }\\n\\n        uint256 gasSpent;\\n        unchecked {\\n            gasSpent = gasStart - gasleft();\\n        }\\n\\n        // If the gas spent is greater than the maximum gas, then the call is not-vulnerable to\\n        // read-only reentrancy\\n        return gasSpent > _MAX_GAS ? false : true;\\n    }\\n\\n    /// @notice Fallback function to receive Ether.\\n    // solhint-disable-next-line comprehensive-interface\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd50d2efeb795786c76ea7b92fbcfdc050d8fdbbaffcfcdfdc4ff2ac1b1b64ef7\",\"license\":\"MIT\"},\"contracts/CurvePriceFeeds/ICurveBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport {ICurveAddressProvider} from \\\"../interfaces/curve/ICurveAddressProvider.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title ICurveOracle\\n * @notice Interface for the CurveOracle contract which provides price feed data for assets on Curve Finance.\\n */\\ninterface ICurveBaseOracle {\\n    /**\\n     * @notice Event emitted when a new LP token is registered within its respective implementation.\\n     * @param token Address of the LP token being registered\\n     */\\n    event RegisterLpToken(address token);\\n\\n    /**\\n     * @notice Fetches relevant information about a Curve liquidity pool.\\n     * @param crvLp The address of the Curve liquidity pool token (LP token).\\n     * @return pool Address of the pool contract.\\n     * @return coins A list of underlying tokens in the Curve liquidity pool.\\n     * @return virtualPrice The current virtual price of the LP token for the given Curve liquidity pool.\\n     */\\n    function getPoolInfo(address crvLp) external returns (address pool, address[] memory coins, uint256 virtualPrice);\\n\\n    /// @notice Returns the Curve Address Provider.\\n    function getAddressProvider() external view returns (ICurveAddressProvider);\\n\\n    /**\\n     * @dev Gets a Registry contract address.\\n     */\\n    function primexRegistry() external view returns (IAccessControl);\\n\\n    /**\\n     * @notice Retrieves the address of PriceOracle contract.\\n     */\\n    function primexPriceOracle() external view returns (IPriceOracleV2);\\n\\n    /**\\n     * @notice Fetches the price of the given token in USD with 18 decimals precision.\\n     * @param token Address of the LP token for which the price is requested.\\n     * @param tokensUsdOracleData An array of oracle data to use for price calculations\\n     * @return The USD price of the given token, multiplied by 10**18.\\n     */\\n    function getPrice(address token, bytes[] calldata tokensUsdOracleData) external returns (uint256);\\n\\n    /**\\n     * @notice Initializes the contract\\n     * @param _addressProvider Address of the curve address provider\\n     * @param _primexPriceOracle The base oracle instance.\\n     * @param _primexRegistry Address of the owner of the contract.\\n     */\\n    function initialize(\\n        ICurveAddressProvider _addressProvider,\\n        IPriceOracleV2 _primexPriceOracle,\\n        IAccessControl _primexRegistry\\n    ) external;\\n}\\n\",\"keccak256\":\"0x97594d0d8652bf61c3c682b543b94ca97095318ba9c0a3ff8f5e578315764241\",\"license\":\"MIT\"},\"contracts/PriceOracle/IPriceOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPriceOracleStorage, IPriceOracleStorageV3, IPriceOracleStorageV4} from \\\"./IPriceOracleStorage.sol\\\";\\n\\ninterface IPriceOracleV2 is IPriceOracleStorageV3 {\\n    event ChainlinkPriceFeedUpdated(address indexed token, address indexed priceFeed);\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n    event PythPairIdUpdated(address indexed token, bytes32 indexed priceFeedId);\\n    event Univ3OracleUpdated(uint256 indexed oracleType, address indexed oracle);\\n    event TimeToleranceUpdated(uint256 timeTolerance);\\n    event SupraDataFeedUpdated(address indexed tokenA, address indexed tokenB, uint256 id);\\n\\n    event Univ3TrustedPairUpdated(\\n        uint256 indexed oracleType,\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        bool isTrusted\\n    );\\n\\n    struct UpdateUniv3TrustedPairParams {\\n        uint256 oracleType;\\n        address tokenA;\\n        address tokenB;\\n        bool isTrusted;\\n    }\\n\\n    enum UpdatePullOracle {\\n        Pyth,\\n        Supra,\\n        Orally\\n    }\\n\\n    struct UpdateSupraDataFeedParams {\\n        address tokenA;\\n        address tokenB;\\n        SupraDataFeedId feedData;\\n    }\\n\\n    /**\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    struct UpdatePriceDropFeedsParams {\\n        address assetA;\\n        address assetB;\\n        address priceDropFeed;\\n    }\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     * @param _usdt Address of the USDT token\\n     * @param _treasury Address of the Treasury\\n     */\\n    function initialize(address _registry, address _eth, address _usdt, address _treasury) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _updateParams The array of the UpdatePriceDropFeedsParams structs\\n     */\\n    function updatePriceDropFeeds(UpdatePriceDropFeedsParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Calculates exchange rate of one token to another according to the specific oracle route\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param oracleData The list of oracles to use for price calculations\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality\\n     */\\n    function getExchangeRate(\\n        address assetA,\\n        address assetB,\\n        bytes calldata oracleData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Sets or updates the Chainlink price feed for the list of tokens to usd.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _feeds Array of price feeds.\\n     */\\n    function updateChainlinkPriceFeedsUsd(address[] calldata _tokens, address[] calldata _feeds) external;\\n\\n    /**\\n     * @notice Sets or updates the Pyth pair ids for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _priceFeedIds Array of pair ids.\\n     */\\n    function updatePythPairId(address[] calldata _tokens, bytes32[] calldata _priceFeedIds) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _params Array of token pairs and Supra ids.\\n     */\\n\\n    function updateSupraDataFeed(UpdateSupraDataFeedParams[] calldata _params) external;\\n\\n    /**\\n     * @notice Sets Uni v3-based TWAP price oracle contracts.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _oracleTypes Array of ids of TWAP contracts.\\n     * @param _oracles Array of TWAP contract addresses.\\n     */\\n    function updateUniv3TypeOracle(uint256[] calldata _oracleTypes, address[] calldata _oracles) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _updateParams Array of token pairs, their DEXs and new trusted status.\\n     */\\n    function updateUniv3TrustedPair(UpdateUniv3TrustedPairParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Sets the Pyth address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pyth the address of the Pyth oracle\\n     */\\n\\n    function setPyth(address _pyth) external;\\n\\n    /**\\n     * @notice Sets the Supra pull oracle address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraPullOracle the address of the Supra pull oracle\\n     */\\n\\n    function setSupraPullOracle(address _supraPullOracle) external;\\n\\n    /**\\n     * @notice Sets the Supra storage address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraStorageOracle the address of the Supra storage\\n     */\\n    function setSupraStorageOracle(address _supraStorageOracle) external;\\n\\n    /**\\n     * @notice Updates pull oracle data for passed oracle types\\n     * @param _data An array of update data for passed oracles\\n     * @param _pullOracleTypes An array of oracle types  (Must conform to the UpdatePullOracle struct)\\n     */\\n\\n    function updatePullOracle(bytes[][] calldata _data, uint256[] calldata _pullOracleTypes) external payable;\\n\\n    /**\\n     * @notice Sets the time tolerance\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _timeTolerance Time tolerance in seconds\\n     */\\n\\n    function setTimeTolerance(uint256 _timeTolerance) external;\\n\\n    /**\\n     * @notice Sets the usdt address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _usdt the address of the USDT\\n     */\\n\\n    function setUSDT(address _usdt) external;\\n\\n    /**\\n     * @notice Sets the treasury address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _treasury the address of the treasury\\n     */\\n    function setTreasury(address _treasury) external;\\n}\\n\\ninterface IPriceOracle is IPriceOracleStorage {\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     */\\n    function initialize(address _registry, address _eth) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Add or update price feed for assets pair. For only the admin role.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @param priceFeed The chain link price feed address for the pair assetA/assetB\\n     */\\n    function updatePriceFeed(address assetA, address assetB, address priceFeed) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Requests two priceFeeds - assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * @dev If there is no price feed found, the code will return a message that no price feed found.\\n     * @param baseAsset The first currency within the currency pair quotation (the base currency).\\n     * @param quoteAsset The second currency within the currency pair quotation (the quote currency).\\n     * @return A tuple of basePriceFeed and quotePriceFeed. The addresses of the price feed for the base asset and quote asset respectively.\\n     */\\n    function getPriceFeedsPair(address baseAsset, address quoteAsset) external view returns (address, address);\\n\\n    /**\\n     * @notice Requests priceFeed for the actual exchange rate for an assetA/assetB pair.\\n     * @dev If no price feed for the pair found, USD and ETH are used as intermediate tokens.\\n     * A price for assetA/assetB can be derived if two data feeds exist:\\n     * assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * If there is no price feed found, the code will return a message that no price feed found.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality which will be recalucaled in PrimexPricingLibrary.\\n     * @return direction of a pair as it stored in chainLinkPriceFeeds (i.e. returns 'true' for assetA/assetB, and 'false' for assetB/assetA).\\n     * Throws if priceFeed wasn't found or priceFeed hasn't answer is 0.\\n     */\\n    function getExchangeRate(address assetA, address assetB) external view returns (uint256, bool);\\n\\n    /**\\n     * @notice Retrieves the direct price feed for the given asset pair.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return priceFeed The address of the direct price feed.\\n     */\\n    function getDirectPriceFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n}\\n\\ninterface IPriceOracleV3 is IPriceOracleV2 {\\n    struct UpdateOrallySymbolsParams {\\n        string symbol; // string(\\\"tokenA/tokenB\\\")\\n        address[2] tokens; // [addressA, addressB]\\n    }\\n\\n    struct UpdateStorkPairIdsParams {\\n        string pair; // string(\\\"BTCUSD\\\")\\n        address[2] tokens; // [btc address, usd address]\\n    }\\n    event OrallySymbolUpdated(address indexed tokenA, address indexed tokenB, string symbol);\\n    event OrallyTimeToleranceUpdated(uint256 timeTolerance);\\n    event StorkPairIdUpdated(address indexed tokenA, address indexed tokenB, string pairId);\\n    event CurveOracleUpdated(IPriceOracleStorageV4.CurveOracleKind indexed oracleType, address indexed oracle);\\n\\n    /**\\n     * @notice Sets or updates the Orally token symbol for the list of tokens (tokens order MATTERS)\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param params Array of UpdateOrallySymbolsParams struct\\n     */\\n\\n    function updateOrallySymbols(UpdateOrallySymbolsParams[] calldata params) external;\\n\\n    /**\\n     * @notice Sets the time tolerance specially for the orally\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _orallyTimeTolerance Time tolerance in seconds\\n     */\\n\\n    function setOrallyTimeTolerance(uint256 _orallyTimeTolerance) external;\\n\\n    /**\\n     * @notice Sets the orally oracle address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _orally the address of the Orally oracle\\n     */\\n    function setOrallyOracle(address _orally) external;\\n\\n    /**\\n     * @notice Sets or updates the Stork Pair Ids\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param params Array of UpdateStorkPairIdsParams struct\\n     */\\n\\n    function updateStorkPairIds(UpdateStorkPairIdsParams[] calldata params) external;\\n\\n    /**\\n     * @notice Sets the stork verify address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _storkVerify the Stork verify address\\n     */\\n\\n    function setStorkVerify(address _storkVerify) external;\\n\\n    /**\\n     * @notice Sets the stork public key (address)\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _storkPublicKey the Stork public key address\\n     */\\n\\n    function setStorkPublicKey(address _storkPublicKey) external;\\n\\n    function updateCurveTypeOracle(\\n        IPriceOracleStorageV4.CurveOracleKind[] calldata _oracleTypes,\\n        address[] calldata _oracles\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc8b274cb4074cbf79618d935776e371e759eead03fac5e4bb111c9812cdc5515\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracleStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {ISupraOraclePull} from \\\"../interfaces/ISupraOraclePull.sol\\\";\\nimport {ISupraSValueFeed} from \\\"../interfaces/ISupraSValueFeed.sol\\\";\\nimport {IOrallyVerifierOracle} from \\\"@orally-network/solidity-sdk/IOrallyVerifierOracle.sol\\\";\\nimport {IStorkVerify} from \\\"../interfaces/IStorkVerify.sol\\\";\\n\\ninterface IPriceOracleStorage {\\n    function registry() external view returns (address);\\n\\n    function eth() external view returns (address);\\n\\n    function gasPriceFeed() external view returns (address);\\n\\n    function pairPriceDrops(address, address) external view returns (uint256);\\n}\\n\\ninterface IPriceOracleStorageV2 is IPriceOracleStorage {\\n    enum OracleType {\\n        Pyth,\\n        Chainlink,\\n        Uniswapv3,\\n        Supra,\\n        Orally,\\n        Stork,\\n        CurveLTOracle\\n    }\\n\\n    struct OracleRoute {\\n        address tokenTo;\\n        OracleType oracleType;\\n        bytes oracleData;\\n    }\\n\\n    function pyth() external view returns (IPyth);\\n\\n    function timeTolerance() external view returns (uint256);\\n\\n    function chainlinkPriceFeedsUsd(address) external view returns (address);\\n\\n    function pythPairIds(address) external view returns (bytes32);\\n\\n    function univ3TypeOracles(uint256) external view returns (address);\\n\\n    function univ3TrustedPairs(uint256, address, address) external view returns (bool);\\n}\\n\\ninterface IPriceOracleStorageV3 is IPriceOracleStorageV2 {\\n    struct SupraDataFeedId {\\n        uint256 id;\\n        bool initialize;\\n    }\\n\\n    function supraPullOracle() external view returns (ISupraOraclePull);\\n\\n    function supraStorageOracle() external view returns (ISupraSValueFeed);\\n\\n    function supraDataFeedID(address, address) external view returns (uint256, bool);\\n\\n    function usdt() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\\ninterface IPriceOracleStorageV4 is IPriceOracleStorageV3 {\\n    enum CurveOracleKind {\\n        STABLE,\\n        TRICRYPTO,\\n        VOLATILE\\n    }\\n\\n    function orallySymbol(address, address) external view returns (string memory);\\n\\n    function orallyOracle() external view returns (IOrallyVerifierOracle);\\n\\n    function orallyTimeTolerance() external view returns (uint256);\\n\\n    function storkVerify() external view returns (IStorkVerify);\\n\\n    function storkPublicKey() external view returns (address);\\n\\n    function storkAssetPairId(address, address) external view returns (string memory);\\n\\n    function curveTypeOracles(CurveOracleKind) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2b8b009d01ffcbe69c3f010d71252348d8fcbb184982fac842b53c0346a347d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IArbGasInfo.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exists in every Arbitrum Nitro chain at 0x000000000000000000000000000000000000006c.\\ninterface IArbGasInfo {\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n\\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\\n    /// @return return gas prices in wei\\n    ///        (\\n    ///            per L2 tx,\\n    ///            per L1 calldata byte\\n    ///            per storage allocation,\\n    ///            per ArbGas base,\\n    ///            per ArbGas congestion,\\n    ///            per ArbGas total\\n    ///        )\\n    function getPricesInWei() external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xec7f78ef81a1aee6f7cf835a6dd75313e8f02fc2ef4e4044871bf1ee8fe02080\"},\"contracts/interfaces/IOVM_GasPriceOracle.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exist on opBNB chain at 0x420000000000000000000000000000000000000F.\\ninterface IOVM_GasPriceOracle {\\n    /// @notice Retrieves the latest known L1 base fee.\\n    /// @return Latest known L1 base fee.\\n    function l1BaseFee() external view returns (uint256);\\n\\n    /// @notice Retrieves the current fee overhead.\\n    /// @return Current fee overhead.\\n    function overhead() external view returns (uint256);\\n\\n    /// @notice Retrieves the current fee scalar.\\n    /// @return Current fee scalar.\\n    function scalar() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c38a19fdde45c93a9469ae3d09a03aba4b08ebce84400b91b41f5d6914a52b2\"},\"contracts/interfaces/IStorkVerify.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\n/* solhint-disable */\\n\\ninterface IStorkVerify {\\n    function verifySignature(\\n        address oracle_pubkey,\\n        string memory asset_pair_id,\\n        uint256 timestamp,\\n        uint256 price,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xd37f0c3c2f7862f9a55579ef13c4a5af4e541c935586b05aeca3799de8b0d3d0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISupraOraclePull.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ISupraOraclePull {\\n    //Verified price data\\n    struct PriceData {\\n        // List of pairs\\n        uint256[] pairs;\\n        // List of prices\\n        // prices[i] is the price of pairs[i]\\n        uint256[] prices;\\n        // List of decimals\\n        // decimals[i] is the decimals of pairs[i]\\n        uint256[] decimals;\\n    }\\n\\n    function verifyOracleProof(bytes calldata _bytesproof) external returns (PriceData memory);\\n}\\n\",\"keccak256\":\"0xf38fcd53bef093ff9dee4914a2ac0ccbe383d624ed6a13ee079c0545cae69198\",\"license\":\"MIT\"},\"contracts/interfaces/ISupraSValueFeed.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/* solhint-disable var-name-mixedcase */\\ninterface ISupraSValueFeed {\\n    struct derivedData {\\n        int256 roundDifference;\\n        uint256 derivedPrice;\\n        uint256 decimals;\\n    }\\n\\n    struct priceFeed {\\n        uint256 round;\\n        uint256 decimals;\\n        uint256 time;\\n        uint256 price;\\n    }\\n\\n    function getDerivedSvalue(\\n        uint256 pair_id_1,\\n        uint256 pair_id_2,\\n        uint256 operation\\n    ) external view returns (derivedData memory);\\n\\n    function getSvalue(uint256 _pairIndex) external view returns (priceFeed memory);\\n}\\n\",\"keccak256\":\"0x7b4e9eaabfd4e929d1006ddb1c01684875eeb95a2c64ac8a848e61b91a8ee21f\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface ICurveAddressProvider {\\n    /* solhint-disable func-name-mixedcase */\\n    /* solhint-disable var-name-mixedcase */\\n    function get_registry() external view returns (address);\\n\\n    function get_id_info(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (address addr, bool is_active, uint256 version, uint256 last_modified, string memory description);\\n\\n    function get_address(uint256 id) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfca417f82f1e055a1df52f88c0a9019f60ef887c68c78f2a8d76712ffcc58cce\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurveCryptoSwapRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface ICurveCryptoSwapRegistry {\\n    /* solhint-disable func-name-mixedcase */\\n    function get_n_coins(address lp) external view returns (uint256);\\n\\n    function pool_list(uint256 id) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_pool_from_lp_token(address lp) external view returns (address);\\n\\n    function get_virtual_price_from_lp_token(address lp) external view returns (uint256);\\n\\n    function get_gauges(address pool) external view returns (address[10] memory, uint128[10] memory);\\n}\\n\",\"keccak256\":\"0x1aeff715c37bd747f190fcf30e34b5b80c7156434c72bc7c9f2bd612ea99f6f7\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurveReentrencyWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ICurveReentrencyWrapper\\n * @author BlueberryProtocol\\n * @notice This interface serves as a wrapper for Curve LP tokens to prevent reentrancy attacks.\\n * @dev Each of these functions should only be used in a reentrancy-protected context.\\n *      No sotrage writes will be performed but the goal is to trigger the Curve reentrancy protection\\n *      in order to verify that price data is accurate and not being manipulated by a malicious actor.\\n */\\ninterface ICurveReentrencyWrapper {\\n    //  solhint-disable func-name-mixedcase\\n    function remove_liquidity(uint256 tokenAmount, uint256[2] calldata amounts) external view;\\n\\n    function remove_liquidity(uint256 tokenAmount, uint256[3] calldata amounts) external view;\\n\\n    function remove_liquidity(uint256 tokenAmount, uint256[4] calldata amounts) external view;\\n\\n    function claim_admin_fees() external view;\\n}\\n\",\"keccak256\":\"0x17d3806b29ef715992bd700c9a57044712a6929865ca74d7d02ff13369366a92\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface ICurveRegistry {\\n    /* solhint-disable func-name-mixedcase */\\n    function get_n_coins(address lp) external view returns (uint256, uint256);\\n\\n    function pool_list(uint256 id) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_pool_from_lp_token(address lp) external view returns (address);\\n\\n    function get_virtual_price_from_lp_token(address lp) external view returns (uint256);\\n\\n    function get_gauges(address pool) external view returns (address[10] memory, uint128[10] memory);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function exchange(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _expected\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x4d6e8a21672c42cb2adaca78fd696ed5e7358bb05263b7af90e5d1a562e847ca\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    error SWAP_DEADLINE_PASSED();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error INVALID_AMOUNT();\\n    error POOL_CALL_FAILED();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n    error INCORRECT_BORROWED_AMOUNT();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error THERE_IS_DIRECT_ROUTE();\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n    error WRONG_ORACLE_ROUTES_LENGTH();\\n    error WRONG_ASSET_B();\\n    error INCORRECT_ROUTE_SEQUENCE();\\n    error INCORRECT_PYTH_PRICE();\\n    error INCORRECT_ORALLY_PRICE();\\n    error TOKEN_PAIR_IS_NOT_TRUSTED();\\n    error INCORRECT_TOKEN_TO();\\n    error INCORRECT_PYTH_ROUTE();\\n    error INCORRECT_CHAINLINK_ROUTE();\\n    error INCORRECT_CURVELP_ROUTE();\\n    error NOT_ENOUGH_MSG_VALUE();\\n    error PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME();\\n    error STORK_VERIFY_FAILED();\\n    error NO_TOKEN_SYMBOL_FOUND();\\n    error NO_TOKEN_PAIR_FOUND();\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n    error LEVERAGE_TOLERANCE_IS_NOT_CORRECT();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error LEVERAGE_TOLERANCE_EXCEEDED();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n    error MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error TOKEN_APPROVE_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n    error INCORRECT_OPTIMISM_GAS_COEFFICIENT();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n\\n    //FlashLoan\\n    error INCONSISTENT_FLASHLOAN_PARAMS();\\n    error INVALID_FLASHLOAN_EXECUTOR_RETURN();\\n    error FLASH_LOAN_FEE_RATE_IS_MORE_10_PERCENT();\\n    error FLASH_LOAN_PROTOCOL_RATE_IS_MORE_50_PERCENT();\\n\\n    // DepositManager\\n    error REWARD_PERCENT_SHOULD_BE_GREATER_THAN_ZERO();\\n    error TOKEN_CANNOT_BE_P_TOKEN();\\n    //Curve oracle\\n    error ORACLE_NOT_SUPPORT_LP();\\n    error ZERO_ADDRESS();\\n    error REENTRANCY_RISK();\\n    error ORACLE_DATA_AND_TOKENS_LENGTH_MISMATCH();\\n    error INCORRECT_LIMITS();\\n    error INCORRECT_ORACLE_DATA();\\n    error VALUE_OUT_OF_RANGE();\\n}\\n\",\"keccak256\":\"0x7caddc4865b795141bb86792960f6a6ada5a7171f2070b11188c5c25c79ec957\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.26;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x49afef0dbc484e0e513c163ee4ce090a30fa061c47a262046c0a7311092a3756\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234602357600e6028565b60146028565b60405161157990816100ce8239f35b600080fd5b60005460ff8160081c1660785760ff8082160360415750565b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1565b60405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816301ffc9a714610acb5750806306bfa93814610a4757806313f839b9146105ec5780631f69565f146105595780632ac5869b146105305780633fd6293914610354578063c0c53b8b146100dd578063d7984f3a146100b45763f8c689340361000f57346100b157806003193601126100b1576035546040516001600160a01b039091168152602090f35b80fd5b50346100b157806003193601126100b1576034546040516001600160a01b039091168152602090f35b50346100b15760603660031901126100b1576004356001600160a01b03811690819003610350576024356001600160a01b0381169081900361034c576044356001600160a01b03811691908290036103485783549260ff8460081c16159384809561033b575b8015610324575b156102c85760ff1981166001178655846102b7575b506040516301ffc9a760e01b81526333ca6d2360e21b6004820152602081602481865afa90811561028d578691610298575b5080610226575b15610214576001600160601b0360a01b60355416176035556001600160601b0360a01b60345416176034556001600160601b0360a01b60335416176033556101dd5780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b60405163044aa57560e41b8152600490fd5b506040516301ffc9a760e01b8152637965db0b60e01b6004820152602081602481875afa90811561028d57869161025e575b50610198565b610280915060203d602011610286575b6102788183610b7a565b810190610c4c565b38610258565b503d61026e565b6040513d88823e3d90fd5b6102b1915060203d602011610286576102788183610b7a565b38610191565b61ffff19166101011785553861015f565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561014a5750600160ff82161461014a565b50600160ff821610610143565b8380fd5b8280fd5b5080fd5b50346100b15760203660031901126100b15761036e610b03565b603354604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8600482015233602482015290602090829060449082906001600160a01b03165afa908115610525578391610506575b50156104f4576001600160a01b0381169081156104e2576103ee90610f5f565b9192604051936103fd85610b48565b6001600160a01b0390811685526020808601938452604080870195865292875260369052908520935184546001600160a01b031916911617835551805190600184019067ffffffffffffffff83116104ce576801000000000000000083116104ce5781548383558084106104a8575b5060200190855260208520855b83811061048b57845160028701558680f35b82516001600160a01b031681830155602090920191600101610479565b828752836020882091820191015b8181106104c3575061046c565b8781556001016104b6565b634e487b7160e01b86526041600452602486fd5b60405163538ba4f960e01b8152600490fd5b60405163036be76f60e61b8152600490fd5b61051f915060203d602011610286576102788183610b7a565b386103ce565b6040513d85823e3d90fd5b50346100b157806003193601126100b1576033546040516001600160a01b039091168152602090f35b50346100b15760203660031901126100b15761057b610576610b03565b610b9c565b906040519060208252608082019060018060a01b038451166020840152602084015191606060408501528251809152602060a085019301915b8181106105cd5750505060408293015160608301520390f35b82516001600160a01b03168452602093840193909201916001016105b4565b50346100b15760403660031901126100b157610606610b03565b906024359067ffffffffffffffff82116100b157366023830112156100b15781600401359267ffffffffffffffff8411610350573660248560051b850101116103505761065290610c78565b9181518603610a32578151906001600160a01b03165a91600281036108cb57506040908151916106828184610b7a565b80368437813b156108c757516316cd8e2760e21b815260048101879052918690839082602483015b600282106108ab575050506064818394612710fa9182610892575b505090612710911560001461088d576106dc610e6a565b505b5a9003111561088657825b6108745790926000199190368190036042190190845b8351811015610837576034546001600160a01b03908116906107218387610b1e565b511690898310156108235760248360051b850101358581121561081f5784019160248301359267ffffffffffffffff841161081b5760440190833603821361081b579183918a60846020956040519788968795869363416be2f360e01b85526004850152610348602485015260606044850152816064850152848401378181018301849052601f01601f191681010301925af19081156108105787916107dd575b508581106107d4575b506001016106ff565b945060016107cb565b905060203d8111610809575b6107f38183610b7a565b602082600092810103126100b1575051386107c2565b503d6107e9565b6040513d89823e3d90fd5b8980fd5b8880fd5b634e487b7160e01b88526032600452602488fd5b5050505082810292818404149015171561086057602082670de0b6b3a764000060405191048152f35b634e487b7160e01b81526011600452602490fd5b604051630f9d066b60e41b8152600490fd5b60016106e9565b6106de565b8161089c91610b7a565b6108a75784386106c5565b8480fd5b825181528a9450869350602092830192600190920191016106aa565b8680fd5b600381036109795750604051906108e3606083610b7a565b6060368337803b156109755785604051809363ecb586a560e01b82528260048301526024820183905b60038210610959575050506084818394612710fa9182610944575b505090612710911560001461088d5761093e610e6a565b506106de565b8161094e91610b7a565b6108a7578438610927565b825181528a94508693506020928301926001909201910161090c565b8580fd5b60041461098b575b50612710906106de565b6040519061099a608083610b7a565b6080368337803b1561097557604051637d49d87560e01b815260048101879052918691839183602484015b60048210610a16575050508160a491612710fa90816109fe575b5061271091906109f9576109f1610e6a565b505b90610981565b6109f3565b94610a0e81612710949397610b7a565b9490916109df565b825181528a9550869450602092830192600190920191016109c5565b604051600162e6a1e960e01b03198152600490fd5b50346100b15760203660031901126100b157610a69610a64610b03565b610c78565b6040516001600160a01b039093168352606060208085018290528351918501829052608085019301905b808610610aa857505082935060408301520390f35b81516001600160a01b031684526001959095019460209384019390910190610a93565b9050346103505760203660031901126103505760043563ffffffff60e01b811680910361034c576301ffc9a760e01b14815260209150f35b600435906001600160a01b0382168203610b1957565b600080fd5b8051821015610b325760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6060810190811067ffffffffffffffff821117610b6457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610b6457604052565b600060408051610bab81610b48565b82815260606020820152015260018060a01b03166000526036602052604060002060405190610bd982610b48565b80546001600160a01b0316825260405160018201805480835260009182526020808320908401929091905b818110610c2d5750505090610c1e81600294930382610b7a565b60208401520154604082015290565b82546001600160a01b0316845260209093019260019283019201610c04565b90816020910312610b1957518015158103610b195790565b51906001600160a01b0382168203610b1957565b90600091606091600091610c8b81610b9c565b80516001600160a01b031615610e585760408101805115610dce575190600582148015610dc4575b610cbc57505050565b92935093509350602060018060a01b03603554169360246040518096819363124fd3dd60e21b835260048301525afa928315610d7c57600093610d88575b5080516020918201516040516362db83a560e11b81526001600160a01b03968716600482015290959094918116929185916024918391165afa928315610d7c57600093610d48575b50929190565b9092506020813d602011610d74575b81610d6460209383610b7a565b81010312610b1957519138610d42565b3d9150610d57565b6040513d6000823e3d90fd5b9092506020813d602011610dbc575b81610da460209383610b7a565b81010312610b1957610db590610c64565b9138610cfa565b3d9150610d97565b5060078214610cb3565b5060355460405163a262904b60e01b8152929650919450919250602090849060049082906001600160a01b03165afa928315610d7c57600093610d88575080516020918201516040516362db83a560e11b81526001600160a01b03968716600482015290959094918116929185916024918391165afa928315610d7c57600093610d485750929190565b604051630cc3378f60e31b8152600490fd5b3d15610ea5573d9067ffffffffffffffff8211610b645760405191610e99601f8201601f191660200184610b7a565b82523d6000602084013e565b606090565b9061010082820312610b195780601f83011215610b195761010060405192610ed28285610b7a565b83918101928311610b1957905b828210610eec5750505090565b60208091610ef984610c64565b815201910190610edf565b67ffffffffffffffff8111610b645760051b60200190565b90610f2682610f04565b610f336040519182610b7a565b8281528092610f44601f1991610f04565b0190602036910137565b906008811015610b325760051b0190565b9060018060a01b036035541660405163a262904b60e01b8152602081600481855afa908115610d7c57600091611509575b5060405163bdf475c360e01b81526001600160a01b0394851660048201819052949190911690602081602481855afa908115610d7c576000916114cf575b506001600160a01b038116806113d257505060405163124fd3dd60e21b8152600560048201529050602081602481855afa908115610d7c57600091611398575b5060405163bdf475c360e01b8152600481018590526001600160a01b039190911690602081602481855afa908115610d7c5760009161135e575b506001600160a01b038116806112605750505060206024916040519283809263124fd3dd60e21b8252600760048301525afa908115610d7c57600091611226575b5060405163bdf475c360e01b815260048101939093526001600160a01b031691602081602481865afa908115610d7c576000916111ec575b506001600160a01b038116806110e357604051630cc3378f60e31b8152600490fd5b60405163940494f160e01b81526004810182905290602082602481885afa918215610d7c576000926111b6575b5061010090602460405180978193639ac90d3d60e01b835260048301525afa938415610d7c57600094611185575b5061114881610f1c565b9360005b82811061115d575050509190600790565b6001906001600160a01b036111728285610f4e565b511661117e8289610b1e565b520161114c565b6111a89194506101003d81116111af575b6111a08183610b7a565b810190610eaa565b923861113e565b503d611196565b90916020823d6020116111e4575b816111d160209383610b7a565b810103126100b157505190610100611110565b3d91506111c4565b90506020813d60201161121e575b8161120760209383610b7a565b81010312610b195761121890610c64565b386110c1565b3d91506111fa565b90506020813d602011611258575b8161124160209383610b7a565b81010312610b195761125290610c64565b38611089565b3d9150611234565b60405163940494f160e01b815260048101829052929550909250602082602481885afa918215610d7c57600092611328575b5061010090602460405180978193639ac90d3d60e01b835260048301525afa938415610d7c57600094611307575b506112ca81610f1c565b9360005b8281106112df575050509190600590565b6001906001600160a01b036112f48285610f4e565b51166113008289610b1e565b52016112ce565b6113219194506101003d81116111af576111a08183610b7a565b92386112c0565b90916020823d602011611356575b8161134360209383610b7a565b810103126100b157505190610100611292565b3d9150611336565b90506020813d602011611390575b8161137960209383610b7a565b81010312610b195761138a90610c64565b38611048565b3d915061136c565b90506020813d6020116113ca575b816113b360209383610b7a565b81010312610b19576113c490610c64565b3861100e565b3d91506113a6565b91945091506040519063940494f160e01b8252806004830152604082602481885afa918215610d7c57600092611499575b5061010090602460405180978193639ac90d3d60e01b835260048301525afa938415610d7c57600094611478575b5061143b81610f1c565b9360005b828110611450575050509190600090565b6001906001600160a01b036114658285610f4e565b51166114718289610b1e565b520161143f565b6114929194506101003d81116111af576111a08183610b7a565b9238611431565b9091506040813d6040116114c7575b816114b560409383610b7a565b81010312610b19575190610100611403565b3d91506114a8565b90506020813d602011611501575b816114ea60209383610b7a565b81010312610b19576114fb90610c64565b38610fce565b3d91506114dd565b90506020813d60201161153b575b8161152460209383610b7a565b81010312610b195761153590610c64565b38610f90565b3d915061151756fea2646970667358221220c1b4c81ae463c5e63d5326809c68ff8869f3aebb8a3b51ab2b9d1c41f66a01d764736f6c634300081a0033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816301ffc9a714610acb5750806306bfa93814610a4757806313f839b9146105ec5780631f69565f146105595780632ac5869b146105305780633fd6293914610354578063c0c53b8b146100dd578063d7984f3a146100b45763f8c689340361000f57346100b157806003193601126100b1576035546040516001600160a01b039091168152602090f35b80fd5b50346100b157806003193601126100b1576034546040516001600160a01b039091168152602090f35b50346100b15760603660031901126100b1576004356001600160a01b03811690819003610350576024356001600160a01b0381169081900361034c576044356001600160a01b03811691908290036103485783549260ff8460081c16159384809561033b575b8015610324575b156102c85760ff1981166001178655846102b7575b506040516301ffc9a760e01b81526333ca6d2360e21b6004820152602081602481865afa90811561028d578691610298575b5080610226575b15610214576001600160601b0360a01b60355416176035556001600160601b0360a01b60345416176034556001600160601b0360a01b60335416176033556101dd5780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b60405163044aa57560e41b8152600490fd5b506040516301ffc9a760e01b8152637965db0b60e01b6004820152602081602481875afa90811561028d57869161025e575b50610198565b610280915060203d602011610286575b6102788183610b7a565b810190610c4c565b38610258565b503d61026e565b6040513d88823e3d90fd5b6102b1915060203d602011610286576102788183610b7a565b38610191565b61ffff19166101011785553861015f565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561014a5750600160ff82161461014a565b50600160ff821610610143565b8380fd5b8280fd5b5080fd5b50346100b15760203660031901126100b15761036e610b03565b603354604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8600482015233602482015290602090829060449082906001600160a01b03165afa908115610525578391610506575b50156104f4576001600160a01b0381169081156104e2576103ee90610f5f565b9192604051936103fd85610b48565b6001600160a01b0390811685526020808601938452604080870195865292875260369052908520935184546001600160a01b031916911617835551805190600184019067ffffffffffffffff83116104ce576801000000000000000083116104ce5781548383558084106104a8575b5060200190855260208520855b83811061048b57845160028701558680f35b82516001600160a01b031681830155602090920191600101610479565b828752836020882091820191015b8181106104c3575061046c565b8781556001016104b6565b634e487b7160e01b86526041600452602486fd5b60405163538ba4f960e01b8152600490fd5b60405163036be76f60e61b8152600490fd5b61051f915060203d602011610286576102788183610b7a565b386103ce565b6040513d85823e3d90fd5b50346100b157806003193601126100b1576033546040516001600160a01b039091168152602090f35b50346100b15760203660031901126100b15761057b610576610b03565b610b9c565b906040519060208252608082019060018060a01b038451166020840152602084015191606060408501528251809152602060a085019301915b8181106105cd5750505060408293015160608301520390f35b82516001600160a01b03168452602093840193909201916001016105b4565b50346100b15760403660031901126100b157610606610b03565b906024359067ffffffffffffffff82116100b157366023830112156100b15781600401359267ffffffffffffffff8411610350573660248560051b850101116103505761065290610c78565b9181518603610a32578151906001600160a01b03165a91600281036108cb57506040908151916106828184610b7a565b80368437813b156108c757516316cd8e2760e21b815260048101879052918690839082602483015b600282106108ab575050506064818394612710fa9182610892575b505090612710911560001461088d576106dc610e6a565b505b5a9003111561088657825b6108745790926000199190368190036042190190845b8351811015610837576034546001600160a01b03908116906107218387610b1e565b511690898310156108235760248360051b850101358581121561081f5784019160248301359267ffffffffffffffff841161081b5760440190833603821361081b579183918a60846020956040519788968795869363416be2f360e01b85526004850152610348602485015260606044850152816064850152848401378181018301849052601f01601f191681010301925af19081156108105787916107dd575b508581106107d4575b506001016106ff565b945060016107cb565b905060203d8111610809575b6107f38183610b7a565b602082600092810103126100b1575051386107c2565b503d6107e9565b6040513d89823e3d90fd5b8980fd5b8880fd5b634e487b7160e01b88526032600452602488fd5b5050505082810292818404149015171561086057602082670de0b6b3a764000060405191048152f35b634e487b7160e01b81526011600452602490fd5b604051630f9d066b60e41b8152600490fd5b60016106e9565b6106de565b8161089c91610b7a565b6108a75784386106c5565b8480fd5b825181528a9450869350602092830192600190920191016106aa565b8680fd5b600381036109795750604051906108e3606083610b7a565b6060368337803b156109755785604051809363ecb586a560e01b82528260048301526024820183905b60038210610959575050506084818394612710fa9182610944575b505090612710911560001461088d5761093e610e6a565b506106de565b8161094e91610b7a565b6108a7578438610927565b825181528a94508693506020928301926001909201910161090c565b8580fd5b60041461098b575b50612710906106de565b6040519061099a608083610b7a565b6080368337803b1561097557604051637d49d87560e01b815260048101879052918691839183602484015b60048210610a16575050508160a491612710fa90816109fe575b5061271091906109f9576109f1610e6a565b505b90610981565b6109f3565b94610a0e81612710949397610b7a565b9490916109df565b825181528a9550869450602092830192600190920191016109c5565b604051600162e6a1e960e01b03198152600490fd5b50346100b15760203660031901126100b157610a69610a64610b03565b610c78565b6040516001600160a01b039093168352606060208085018290528351918501829052608085019301905b808610610aa857505082935060408301520390f35b81516001600160a01b031684526001959095019460209384019390910190610a93565b9050346103505760203660031901126103505760043563ffffffff60e01b811680910361034c576301ffc9a760e01b14815260209150f35b600435906001600160a01b0382168203610b1957565b600080fd5b8051821015610b325760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6060810190811067ffffffffffffffff821117610b6457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610b6457604052565b600060408051610bab81610b48565b82815260606020820152015260018060a01b03166000526036602052604060002060405190610bd982610b48565b80546001600160a01b0316825260405160018201805480835260009182526020808320908401929091905b818110610c2d5750505090610c1e81600294930382610b7a565b60208401520154604082015290565b82546001600160a01b0316845260209093019260019283019201610c04565b90816020910312610b1957518015158103610b195790565b51906001600160a01b0382168203610b1957565b90600091606091600091610c8b81610b9c565b80516001600160a01b031615610e585760408101805115610dce575190600582148015610dc4575b610cbc57505050565b92935093509350602060018060a01b03603554169360246040518096819363124fd3dd60e21b835260048301525afa928315610d7c57600093610d88575b5080516020918201516040516362db83a560e11b81526001600160a01b03968716600482015290959094918116929185916024918391165afa928315610d7c57600093610d48575b50929190565b9092506020813d602011610d74575b81610d6460209383610b7a565b81010312610b1957519138610d42565b3d9150610d57565b6040513d6000823e3d90fd5b9092506020813d602011610dbc575b81610da460209383610b7a565b81010312610b1957610db590610c64565b9138610cfa565b3d9150610d97565b5060078214610cb3565b5060355460405163a262904b60e01b8152929650919450919250602090849060049082906001600160a01b03165afa928315610d7c57600093610d88575080516020918201516040516362db83a560e11b81526001600160a01b03968716600482015290959094918116929185916024918391165afa928315610d7c57600093610d485750929190565b604051630cc3378f60e31b8152600490fd5b3d15610ea5573d9067ffffffffffffffff8211610b645760405191610e99601f8201601f191660200184610b7a565b82523d6000602084013e565b606090565b9061010082820312610b195780601f83011215610b195761010060405192610ed28285610b7a565b83918101928311610b1957905b828210610eec5750505090565b60208091610ef984610c64565b815201910190610edf565b67ffffffffffffffff8111610b645760051b60200190565b90610f2682610f04565b610f336040519182610b7a565b8281528092610f44601f1991610f04565b0190602036910137565b906008811015610b325760051b0190565b9060018060a01b036035541660405163a262904b60e01b8152602081600481855afa908115610d7c57600091611509575b5060405163bdf475c360e01b81526001600160a01b0394851660048201819052949190911690602081602481855afa908115610d7c576000916114cf575b506001600160a01b038116806113d257505060405163124fd3dd60e21b8152600560048201529050602081602481855afa908115610d7c57600091611398575b5060405163bdf475c360e01b8152600481018590526001600160a01b039190911690602081602481855afa908115610d7c5760009161135e575b506001600160a01b038116806112605750505060206024916040519283809263124fd3dd60e21b8252600760048301525afa908115610d7c57600091611226575b5060405163bdf475c360e01b815260048101939093526001600160a01b031691602081602481865afa908115610d7c576000916111ec575b506001600160a01b038116806110e357604051630cc3378f60e31b8152600490fd5b60405163940494f160e01b81526004810182905290602082602481885afa918215610d7c576000926111b6575b5061010090602460405180978193639ac90d3d60e01b835260048301525afa938415610d7c57600094611185575b5061114881610f1c565b9360005b82811061115d575050509190600790565b6001906001600160a01b036111728285610f4e565b511661117e8289610b1e565b520161114c565b6111a89194506101003d81116111af575b6111a08183610b7a565b810190610eaa565b923861113e565b503d611196565b90916020823d6020116111e4575b816111d160209383610b7a565b810103126100b157505190610100611110565b3d91506111c4565b90506020813d60201161121e575b8161120760209383610b7a565b81010312610b195761121890610c64565b386110c1565b3d91506111fa565b90506020813d602011611258575b8161124160209383610b7a565b81010312610b195761125290610c64565b38611089565b3d9150611234565b60405163940494f160e01b815260048101829052929550909250602082602481885afa918215610d7c57600092611328575b5061010090602460405180978193639ac90d3d60e01b835260048301525afa938415610d7c57600094611307575b506112ca81610f1c565b9360005b8281106112df575050509190600590565b6001906001600160a01b036112f48285610f4e565b51166113008289610b1e565b52016112ce565b6113219194506101003d81116111af576111a08183610b7a565b92386112c0565b90916020823d602011611356575b8161134360209383610b7a565b810103126100b157505190610100611292565b3d9150611336565b90506020813d602011611390575b8161137960209383610b7a565b81010312610b195761138a90610c64565b38611048565b3d915061136c565b90506020813d6020116113ca575b816113b360209383610b7a565b81010312610b19576113c490610c64565b3861100e565b3d91506113a6565b91945091506040519063940494f160e01b8252806004830152604082602481885afa918215610d7c57600092611499575b5061010090602460405180978193639ac90d3d60e01b835260048301525afa938415610d7c57600094611478575b5061143b81610f1c565b9360005b828110611450575050509190600090565b6001906001600160a01b036114658285610f4e565b51166114718289610b1e565b520161143f565b6114929194506101003d81116111af576111a08183610b7a565b9238611431565b9091506040813d6040116114c7575b816114b560409383610b7a565b81010312610b19575190610100611403565b3d91506114a8565b90506020813d602011611501575b816114ea60209383610b7a565b81010312610b19576114fb90610c64565b38610fce565b3d91506114dd565b90506020813d60201161153b575b8161152460209383610b7a565b81010312610b195761153590610c64565b38610f90565b3d915061151756fea2646970667358221220c1b4c81ae463c5e63d5326809c68ff8869f3aebb8a3b51ab2b9d1c41f66a01d764736f6c634300081a0033",
  "devdoc": {
    "author": "BlueberryProtocol",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RegisterLpToken(address)": {
        "params": {
          "token": "Address of the LP token being registered"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getPoolInfo(address)": {
        "params": {
          "crvLp": "The address of the Curve liquidity pool token (LP token)."
        },
        "returns": {
          "coins": "A list of underlying tokens in the Curve liquidity pool.",
          "pool": "Address of the pool contract.",
          "virtualPrice": "The current virtual price of the LP token for the given Curve liquidity pool."
        }
      },
      "getPrice(address,bytes[])": {
        "params": {
          "token": "Address of the LP token for which the price is requested.",
          "tokensUsdOracleData": "An array of oracle data to use for price calculations"
        },
        "returns": {
          "_0": "The USD price of the given token, multiplied by 10**18."
        }
      },
      "getTokenInfo(address)": {
        "params": {
          "crvLp": "Curve LP Token address"
        },
        "returns": {
          "_0": "TokenInfo struct of given token"
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "_addressProvider": "Address of the curve address provider",
          "_primexPriceOracle": "The base oracle instance.",
          "_primexRegistry": "Address of the owner of the contract."
        }
      },
      "registerCurveLp(address)": {
        "params": {
          "crvLp": "Address of the Curve LP token."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "_MAX_GAS": {
        "details": "Max gas for reentrancy check."
      }
    },
    "title": "CurveStableOracle",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RegisterLpToken(address)": {
        "notice": "Event emitted when a new LP token is registered within its respective implementation."
      }
    },
    "kind": "user",
    "methods": {
      "getAddressProvider()": {
        "notice": "Returns the Curve Address Provider."
      },
      "getPoolInfo(address)": {
        "notice": "Fetches relevant information about a Curve liquidity pool."
      },
      "getPrice(address,bytes[])": {
        "notice": "Fetches the price of the given token in USD with 18 decimals precision."
      },
      "getTokenInfo(address)": {
        "notice": "Fetches the token info for a given LP token."
      },
      "initialize(address,address,address)": {
        "notice": "Initializes the contract"
      },
      "registerCurveLp(address)": {
        "notice": "Registers Curve LP token with the oracle."
      }
    },
    "notice": "Oracle contract that provides price feeds for Curve stable LP tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2890,
        "contract": "contracts/CurvePriceFeeds/CurveStableOracle.sol:CurveStableOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2893,
        "contract": "contracts/CurvePriceFeeds/CurveStableOracle.sol:CurveStableOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6506,
        "contract": "contracts/CurvePriceFeeds/CurveStableOracle.sol:CurveStableOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 29668,
        "contract": "contracts/CurvePriceFeeds/CurveStableOracle.sol:CurveStableOracle",
        "label": "primexRegistry",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IAccessControl)7879"
      },
      {
        "astId": 29672,
        "contract": "contracts/CurvePriceFeeds/CurveStableOracle.sol:CurveStableOracle",
        "label": "primexPriceOracle",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IPriceOracleV2)53399"
      },
      {
        "astId": 29676,
        "contract": "contracts/CurvePriceFeeds/CurveStableOracle.sol:CurveStableOracle",
        "label": "addressProvider",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(ICurveAddressProvider)71766"
      },
      {
        "astId": 29682,
        "contract": "contracts/CurvePriceFeeds/CurveStableOracle.sol:CurveStableOracle",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_struct(TokenInfo)29663_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControl)7879": {
        "encoding": "inplace",
        "label": "contract IAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ICurveAddressProvider)71766": {
        "encoding": "inplace",
        "label": "contract ICurveAddressProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracleV2)53399": {
        "encoding": "inplace",
        "label": "contract IPriceOracleV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(TokenInfo)29663_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CurveBaseOracle.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)29663_storage"
      },
      "t_struct(TokenInfo)29663_storage": {
        "encoding": "inplace",
        "label": "struct CurveBaseOracle.TokenInfo",
        "members": [
          {
            "astId": 29657,
            "contract": "contracts/CurvePriceFeeds/CurveStableOracle.sol:CurveStableOracle",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 29660,
            "contract": "contracts/CurvePriceFeeds/CurveStableOracle.sol:CurveStableOracle",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 29662,
            "contract": "contracts/CurvePriceFeeds/CurveStableOracle.sol:CurveStableOracle",
            "label": "registryIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}